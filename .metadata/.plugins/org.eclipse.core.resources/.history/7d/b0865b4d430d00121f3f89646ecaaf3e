# -*- coding: utf-8 -*-
'''
Created on 02/10/2012

@author: bicho
'''

import MySQLdb
import sys

class myDb(object):
    '''
    Clase mi base de datos. Se encarga de interaccionar con la base de datos MySql
    '''
        
    def __init__(self,host,user,userpwd,database):
        '''
        Constructor
        '''
        self.__host = host
        self.__user = user
        self.__userpwd = userpwd
        self.__database = database
        self.__conn=None
    def connect(self):
        try:
            self.__conn = MySQLdb.connect(host = self.__host,
                                   user = self.__user,
                                   passwd = self.__userpwd,
                                   db = self.__database,
                                   charset="utf8",
                                   use_unicode=True)
        except MySQLdb.Error, e:
                print "Error %d: %s" % (e.args[0], e.args[1])
                sys.exit (1)
                
    def disconnect(self):
        try:
            self.__conn.commit()
            self.__conn.close()
        except MySQLdb.Error, e:
                print "Error %d: %s" % (e.args[0], e.args[1])
                sys.exit (1)
    def get_project_list(self):
        try:
            cur=self.__conn.cursor()
            cur.execute("SELECT * from Proyectos")
            desc = cur.description
            rows = cur.fetchall()
            cabeceras = tuple([cab[0] for cab in desc])
            return (True,(cabeceras,rows))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en get_project_list",))
        finally:
            if cur:
                cur.close()
    
    def get_resource_list(self):
        try:
            cur=self.__conn.cursor()
            cur.execute("SELECT * from Recursos")
            desc = cur.description
            rows = cur.fetchall()
            cabeceras = tuple([cab[0] for cab in desc])
            return (True,(cabeceras,rows))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en get_resource_list",))
        finally:
            if cur:
                cur.close()
 
    def get_activity_list(self):
        try:
            cur=self.__conn.cursor()
            cur.execute("SELECT * from Fases")
            desc = cur.description
            rows = cur.fetchall()
            cabeceras = tuple([cab[0] for cab in desc])
            return (True,(cabeceras,rows))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en get_activities_list",))
        finally:
            if cur:
                cur.close()
    def get_task_list(self, grouping):
        """Grouping:
                0, no grouping at all
                1, Resource,Project,Activity
                2, Resource,Project,
                3, Project, Activity
                4, Project"""
        try:
            cur=self.__conn.cursor()
            if grouping == '0':
                cur.execute("""select nombre, descripcion, fase, horas, creation_time, 
                    update_time from recursos, Proyectos, fases, Cargas 
                    where recursos.Idrecurso=Cargas.IdRecurso 
                    and Proyectos.idProyecto=Cargas.idProyecto
                    and fases.idfase = Cargas.idfase""")
            elif grouping =='1':
                cur.execute("""select nombre, descripcion, fase, SUM(horas)
                    from recursos, Proyectos, fases, Cargas 
                    where recursos.Idrecurso=Cargas.IdRecurso 
                    and Proyectos.idProyecto=Cargas.idProyecto
                    and fases.idfase = Cargas.idfase
                    group by Cargas.IdRecurso, Cargas.IdProyecto, Cargas.IdFase""")                
            desc = cur.description
            rows = cur.fetchall()
            cabeceras = tuple([cab[0] for cab in desc])
            return (True,(cabeceras,rows))
        except MySQLdb.Error, e:
            print "Error {0}" % (e.args)
            return (False, ("Error en get_task_list",))
        finally:
            if cur:
                cur.close()    
    def get_task_raw_list(self):
        try:
            cur=self.__conn.cursor()
            cur.execute("select * from Cargas")
            desc = cur.description
            rows = cur.fetchall()
            cabeceras = tuple([cab[0] for cab in desc])
            return (True,(cabeceras,rows))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en get_task_raw_list",))
        finally:
            if cur:
                cur.close()
    def set_new_project(self, Codigo, Descripcion):
        try:
            cur=self.__conn.cursor()
            cur.execute ("INSERT INTO Proyectos(Codigo,Descripcion) VALUES(%s,%s)",(Codigo,Descripcion))
            return (True, ("Insertado nuevo proyecto",))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en set_new_project",))
        
    def set_new_resource(self, Nombre, Coste):
        try:
            cur=self.__conn.cursor()
            cur.execute ("INSERT INTO Recursos(Nombre, Coste) VALUES(%s,%s)",(Nombre,Coste))
            return (True, ("Insertado nuevo recurso",))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en set_new_resource",))
    def set_new_activity(self, Fase):
        try:
            cur=self.__conn.cursor()
            cur.execute ("INSERT INTO Fases(Fase) VALUES(%s)",(Fase))
            return (True, ("Insertado nueva fase",))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en set_new_activity",))

    def set_new_task(self, IdRecurso,IdProyecto,IdFase,Horas):
        try:
            cur=self.__conn.cursor()
            cur.execute ("""INSERT INTO Cargas(IdRecurso,IdProyecto,IdFase,horas) 
            VALUES(%s,%s,%s,%s)""",(IdRecurso,IdProyecto,IdFase,Horas))
            return (True, ("Insertado nueva Carga",))
        except MySQLdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return (False, ("Error en set_new_activity",))

def print_tuples(data):
    for detail in data[0]:
        print detail, "\t",
    print
    for row in data[1]:
        for detail in row:
            print detail, "\t",
        print    
        
def main():
    InPr = myDb('localhost', 'puser','pu8549','proyectos')
    InPr.connect()
    print "me conecté"
    #===========================================================================
    # ok,lista = InPr.set_new_activity("Elaboración de Manuales")
    # ok,lista = InPr.set_new_project('007', 'Criba mu buena')
    # ok,lista = InPr.set_new_resource("Ivan Rego", '20.2')
    #===========================================================================
#===============================================================================
#    for i in range(10):
#        ok,lista = InPr.set_new_task('1', '1', '1', '5')
# 
#    for i in range(10):
#        ok,lista = InPr.set_new_task('1', '1', '2', '5')
#===============================================================================
    #===========================================================================
    # ok,lista = InPr.get_project_list()
    # print_tuples(lista)
    # ok,lista = InPr.get_resource_list()
    # print_tuples(lista)
    # ok,lista = InPr.get_activity_list()
    # print_tuples(lista)
    #===========================================================================

    #===========================================================================
    # ok,lista = InPr.get_task_raw_list()
    # print_tuples(lista)
    #===========================================================================
    
    ok,lista = InPr.get_task_list(0)
    print_tuples(lista)
    ok,lista = InPr.get_task_list(1)
    print_tuples(lista)
   
    InPr.disconnect()
    print "me desconecté"
main()